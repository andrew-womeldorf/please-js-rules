def yarn_library(name: str, version: str, scope: str=None, package_name=None, out=None, hashes=None, test_only=False, patches=None,
                 visibility=None, deps=None, _tag=''):
    """Install a third-party library from the yarn registry.

    The typical workflow for this is to use yarn to set up your package.json and package-lock.json,
    then feed it through yarn_deps.py to generate the appropriate BUILD rules.

    Args:
      name (str): Name of the rule.
      version (str): Version of the package to install.
      scope (str): The name of the node scope. Defaults to name.
      package_name (str): The name of the node package. Defaults to name.
      out (str): Output name for this package. Defaults to name.
      hashes (list): List of hashes that outputs must match.
      test_only (bool): If True, can only be depended on by test rules.
      patches (list): List of patch files to apply to the output library.
      visibility (list): Visibility declaration for this rule.
      deps (list): Any other dependencies of the rule.
    """
    package_name = package_name or name

    if scope:
        url = 'https://registry.yarnpkg.com/%s/%s/-/%s-%s.tgz' % (scope, package_name, package_name, version)
    else:
        url = 'https://registry.yarnpkg.com/%s/-/%s-%s.tgz' % (package_name, package_name, version)

    cmd = [
        f'echo "Fetching {url}..."',
        f'curl -fsSL {url} | tar -xz --no-same-owner --no-same-permissions',
        'mv $(find -maxdepth 2 -name package.json | cut -d "/" -f 2) $OUT',
    ]

    if patches:
        cmd += [
            'for SRC in $SRCS; do patch -p0 -l -i $SRC; done'
        ]

    return build_rule(
        name = name,
        tag = _tag,
        cmd = ' && '.join(cmd),
        srcs = patches,
        outs = [out or name],
        hashes = hashes,
        test_only = test_only,
        building_description = 'Downloading...',
        output_is_complete = False,
        visibility = visibility,
        exported_deps = deps,
        labels = ['yarn:%s@%s' % (package_name, version)],
    )

def yarn_binary(name:str, package:str, deps:list=[], bin_name:str=None, visibility:list=None, labels:list=None):
    """Create a binary executable from an yarn bundle.

    Args:
        name (str): Name of the target.
        package (str): a yarn_library that contain the node script that we are going to use
        deps (list): list of yarn dependencies that will be copied in node_modules dir of the package
        bin_name (str): Name of the script found in the bin section of package.json. Defaults to name.
        labels (list): a list of labels that will be used to mark the returning targets
        visibility (list): Visibility declaration for this rule.

    """

    bin_name = bin_name or name

    deps_dict = {}
    for d in deps:
        deps_dict[d] = d[1:].replace("--", "/")

    bundle = genrule(
        name = '_'+name+'#bundle',
        srcs = [package],
        deps = deps,

        cmd = [
                  'mkdir -p $OUT',
                  f'cp -Rf $(location {package})/* $OUT',
                  ]+[f'mkdir -p $OUT/node_modules/{dr} && cp -rf $(location {d})/* $OUT/node_modules/{dr}' for d, dr in deps_dict.items()],
        outs = [name]
    )

    return genrule(
        name = name,
        cmd = [
            'echo "#!/usr/bin/env bash" >> $OUT',
            f'echo "${TOOLS_NODE} ${TOOLS_BIN}/$(${TOOLS_JQ} -r \'if (.bin | type) == "string" then .bin else .bin["{bin_name}"] end\' ${TOOLS_BIN}/package.json) \\\$@" >> $OUT',
        ],
        tools = {
            'node':[CONFIG.NODE_TOOL],
            'jq': [CONFIG.JQ_TOOL],
            'bin': [bundle],
        },
        outs = [name +'.sh'],
        binary = True,
        visibility = visibility,
        labels = labels ,
    )

# Set these so others can override them using package()
CONFIG.setdefault('NODE_TOOL', 'node')
CONFIG.setdefault('NODE_PATH', '$TMP_DIR:$TMP_DIR/third_party/js')
CONFIG.setdefault('JQ_TOOL', 'jq')
